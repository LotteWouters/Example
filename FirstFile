{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e50c3382",
   "metadata": {},
   "outputs": [],
   "source": [
    "myList = [1,2,3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2e317013",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3]\n"
     ]
    }
   ],
   "source": [
    "print(myList)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ff8438ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "for i in myList:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eed4dd7b",
   "metadata": {},
   "source": [
    "A pandas guide can be found [here](https://pandas.pydata.org/docs/getting_started/intro_tutorials/)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95e8f981",
   "metadata": {},
   "source": [
    "From here on i follow [this](https://www.youtube.com/watch?v=0Lt9w-BxKFQ&ab_channel=Simplilearn) tutorial:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "83955a93",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing required packages\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn import svm\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3c47c778",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>quality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.9978</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0.098</td>\n",
       "      <td>25.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0.9968</td>\n",
       "      <td>3.20</td>\n",
       "      <td>0.68</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.04</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0.092</td>\n",
       "      <td>15.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0.9970</td>\n",
       "      <td>3.26</td>\n",
       "      <td>0.65</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.2</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.56</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.075</td>\n",
       "      <td>17.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0.9980</td>\n",
       "      <td>3.16</td>\n",
       "      <td>0.58</td>\n",
       "      <td>9.8</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.9978</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
       "0            7.4              0.70         0.00             1.9      0.076   \n",
       "1            7.8              0.88         0.00             2.6      0.098   \n",
       "2            7.8              0.76         0.04             2.3      0.092   \n",
       "3           11.2              0.28         0.56             1.9      0.075   \n",
       "4            7.4              0.70         0.00             1.9      0.076   \n",
       "\n",
       "   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
       "0                 11.0                  34.0   0.9978  3.51       0.56   \n",
       "1                 25.0                  67.0   0.9968  3.20       0.68   \n",
       "2                 15.0                  54.0   0.9970  3.26       0.65   \n",
       "3                 17.0                  60.0   0.9980  3.16       0.58   \n",
       "4                 11.0                  34.0   0.9978  3.51       0.56   \n",
       "\n",
       "   alcohol  quality  \n",
       "0      9.4        5  \n",
       "1      9.8        5  \n",
       "2      9.8        5  \n",
       "3      9.8        6  \n",
       "4      9.4        5  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Loading the data\n",
    "wine = pd.read_csv('C:/Users/woute/OneDrive/Documenten/DataFiles/archive/winequality-red.csv') #here we use pandas to read data\n",
    "wine.head() # this is just Rcode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a6d92cf5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1599 entries, 0 to 1598\n",
      "Data columns (total 12 columns):\n",
      " #   Column                Non-Null Count  Dtype  \n",
      "---  ------                --------------  -----  \n",
      " 0   fixed acidity         1599 non-null   float64\n",
      " 1   volatile acidity      1599 non-null   float64\n",
      " 2   citric acid           1599 non-null   float64\n",
      " 3   residual sugar        1599 non-null   float64\n",
      " 4   chlorides             1599 non-null   float64\n",
      " 5   free sulfur dioxide   1599 non-null   float64\n",
      " 6   total sulfur dioxide  1599 non-null   float64\n",
      " 7   density               1599 non-null   float64\n",
      " 8   pH                    1599 non-null   float64\n",
      " 9   sulphates             1599 non-null   float64\n",
      " 10  alcohol               1599 non-null   float64\n",
      " 11  quality               1599 non-null   int64  \n",
      "dtypes: float64(11), int64(1)\n",
      "memory usage: 150.0 KB\n"
     ]
    }
   ],
   "source": [
    "wine.info() # gives information about the structure of the dataset\n",
    "#non-null means that there are no null values in that covariate\n",
    "#this can also be viewed with the line 'wine.isnull().sum()'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b31060a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "fixed acidity           0\n",
       "volatile acidity        0\n",
       "citric acid             0\n",
       "residual sugar          0\n",
       "chlorides               0\n",
       "free sulfur dioxide     0\n",
       "total sulfur dioxide    0\n",
       "density                 0\n",
       "pH                      0\n",
       "sulphates               0\n",
       "alcohol                 0\n",
       "quality                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wine.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9fdb22f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Preprocessing Data:\n",
    "bins = (2, 6.5, 8) # we create 2 intervals: [2,6.5] and [6.5,8]\n",
    "group_names = ['bad', 'good'] \n",
    "# these areas will correspond with the names 'bad' and 'good'\n",
    "# we replace the col.'quality' with a label from group_names\n",
    "wine['quality'] = pd.cut(wine['quality'],bins = bins, labels = group_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1222baf9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>quality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.9978</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0.098</td>\n",
       "      <td>25.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0.9968</td>\n",
       "      <td>3.20</td>\n",
       "      <td>0.68</td>\n",
       "      <td>9.8</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.04</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0.092</td>\n",
       "      <td>15.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0.9970</td>\n",
       "      <td>3.26</td>\n",
       "      <td>0.65</td>\n",
       "      <td>9.8</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.2</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.56</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.075</td>\n",
       "      <td>17.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0.9980</td>\n",
       "      <td>3.16</td>\n",
       "      <td>0.58</td>\n",
       "      <td>9.8</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.9978</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
       "0            7.4              0.70         0.00             1.9      0.076   \n",
       "1            7.8              0.88         0.00             2.6      0.098   \n",
       "2            7.8              0.76         0.04             2.3      0.092   \n",
       "3           11.2              0.28         0.56             1.9      0.075   \n",
       "4            7.4              0.70         0.00             1.9      0.076   \n",
       "\n",
       "   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
       "0                 11.0                  34.0   0.9978  3.51       0.56   \n",
       "1                 25.0                  67.0   0.9968  3.20       0.68   \n",
       "2                 15.0                  54.0   0.9970  3.26       0.65   \n",
       "3                 17.0                  60.0   0.9980  3.16       0.58   \n",
       "4                 11.0                  34.0   0.9978  3.51       0.56   \n",
       "\n",
       "   alcohol quality  \n",
       "0      9.4     bad  \n",
       "1      9.8     bad  \n",
       "2      9.8     bad  \n",
       "3      9.8     bad  \n",
       "4      9.4     bad  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wine.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62123b12",
   "metadata": {},
   "source": [
    "However, now we made labels that are strings so if we want them to be numerical we will do the following. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "368ea9d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "label_quality = LabelEncoder() # the LabelEncoder will change a label to a numerical encoding (0,1,2,...) \n",
    "# On the next line we will apply it to the column 'quality'\n",
    "wine['quality'] = label_quality.fit_transform(wine['quality'])\n",
    "#Note: we can do .fit_transform in the same line to save space\n",
    "#fit_transform() = transforms the data by standardizing it? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a1a22593",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>quality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.9978</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0.098</td>\n",
       "      <td>25.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0.9968</td>\n",
       "      <td>3.20</td>\n",
       "      <td>0.68</td>\n",
       "      <td>9.8</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.04</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0.092</td>\n",
       "      <td>15.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0.9970</td>\n",
       "      <td>3.26</td>\n",
       "      <td>0.65</td>\n",
       "      <td>9.8</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.2</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.56</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.075</td>\n",
       "      <td>17.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0.9980</td>\n",
       "      <td>3.16</td>\n",
       "      <td>0.58</td>\n",
       "      <td>9.8</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.9978</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
       "0            7.4              0.70         0.00             1.9      0.076   \n",
       "1            7.8              0.88         0.00             2.6      0.098   \n",
       "2            7.8              0.76         0.04             2.3      0.092   \n",
       "3           11.2              0.28         0.56             1.9      0.075   \n",
       "4            7.4              0.70         0.00             1.9      0.076   \n",
       "\n",
       "   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
       "0                 11.0                  34.0   0.9978  3.51       0.56   \n",
       "1                 25.0                  67.0   0.9968  3.20       0.68   \n",
       "2                 15.0                  54.0   0.9970  3.26       0.65   \n",
       "3                 17.0                  60.0   0.9980  3.16       0.58   \n",
       "4                 11.0                  34.0   0.9978  3.51       0.56   \n",
       "\n",
       "   alcohol  quality  \n",
       "0      9.4        0  \n",
       "1      9.8        0  \n",
       "2      9.8        0  \n",
       "3      9.8        0  \n",
       "4      9.4        0  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wine.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4ec77758",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1382\n",
       "1     217\n",
       "Name: quality, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#we can now count how many 'good' wines we have:\n",
    "wine['quality'].value_counts() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "21cf7837",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\woute\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='quality', ylabel='count'>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#we can plot this on a graph:\n",
    "sns.countplot(wine['quality'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "60e5ec2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Now we seperate the dataset as response variables and feature variables\n",
    "X = wine.drop('quality',axis=1) \n",
    "# this will drop certain elements from the dataframe axis = 0 will drop data from a row or index, axis = 1 will\n",
    "# drop data from a column but since we have given a name this is normally redundant...\n",
    "y = wine['quality']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e37033e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1076</th>\n",
       "      <td>9.9</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.56</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.073</td>\n",
       "      <td>3.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.99534</td>\n",
       "      <td>3.15</td>\n",
       "      <td>0.73</td>\n",
       "      <td>11.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>847</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.68</td>\n",
       "      <td>0.16</td>\n",
       "      <td>1.8</td>\n",
       "      <td>0.078</td>\n",
       "      <td>12.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0.99770</td>\n",
       "      <td>3.50</td>\n",
       "      <td>0.70</td>\n",
       "      <td>9.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>582</th>\n",
       "      <td>11.7</td>\n",
       "      <td>0.49</td>\n",
       "      <td>0.49</td>\n",
       "      <td>2.2</td>\n",
       "      <td>0.083</td>\n",
       "      <td>5.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>3.19</td>\n",
       "      <td>0.43</td>\n",
       "      <td>9.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>8.0</td>\n",
       "      <td>0.42</td>\n",
       "      <td>0.17</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.073</td>\n",
       "      <td>6.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.99720</td>\n",
       "      <td>3.29</td>\n",
       "      <td>0.61</td>\n",
       "      <td>9.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>779</th>\n",
       "      <td>7.1</td>\n",
       "      <td>0.52</td>\n",
       "      <td>0.03</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0.076</td>\n",
       "      <td>21.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>0.99745</td>\n",
       "      <td>3.50</td>\n",
       "      <td>0.60</td>\n",
       "      <td>9.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
       "1076            9.9              0.32         0.56             2.0      0.073   \n",
       "847             7.4              0.68         0.16             1.8      0.078   \n",
       "582            11.7              0.49         0.49             2.2      0.083   \n",
       "172             8.0              0.42         0.17             2.0      0.073   \n",
       "779             7.1              0.52         0.03             2.6      0.076   \n",
       "\n",
       "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
       "1076                  3.0                   8.0  0.99534  3.15       0.73   \n",
       "847                  12.0                  39.0  0.99770  3.50       0.70   \n",
       "582                   5.0                  15.0  1.00000  3.19       0.43   \n",
       "172                   6.0                  18.0  0.99720  3.29       0.61   \n",
       "779                  21.0                  92.0  0.99745  3.50       0.60   \n",
       "\n",
       "      alcohol  \n",
       "1076     11.4  \n",
       "847       9.9  \n",
       "582       9.2  \n",
       "172       9.2  \n",
       "779       9.8  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Split the data in training and test set\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.2, random_state = 123 )\n",
    "#test_size = 0.2 = 20%\n",
    "#random_state is like a random seed to make sure we can reproduce results\n",
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2ba9e83d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 8.93582976e-01, -1.13946293e+00,  1.48264243e+00,\n",
       "        -3.85232386e-01, -3.01984279e-01, -1.23868248e+00,\n",
       "        -1.20211614e+00, -7.54611463e-01, -1.03607885e+00,\n",
       "         4.05975742e-01,  9.32956363e-01],\n",
       "       [-5.31043852e-01,  8.63416667e-01, -5.78104872e-01,\n",
       "        -5.23634695e-01, -1.98745240e-01, -4.05754709e-01,\n",
       "        -2.67315058e-01,  4.91483489e-01,  1.23111916e+00,\n",
       "         2.31888916e-01, -4.74437642e-01],\n",
       "       [ 1.91931429e+00, -1.93658673e-01,  1.12201165e+00,\n",
       "        -2.46830076e-01, -9.55062010e-02, -1.05358742e+00,\n",
       "        -9.91032028e-01,  1.70589806e+00, -7.76970504e-01,\n",
       "        -1.33489252e+00, -1.13122151e+00],\n",
       "       [-1.89133413e-01, -5.83107483e-01, -5.26586190e-01,\n",
       "        -3.85232386e-01, -3.01984279e-01, -9.61039887e-01,\n",
       "        -9.00567407e-01,  2.27480321e-01, -1.29199645e-01,\n",
       "        -2.90371564e-01, -1.13122151e+00],\n",
       "       [-7.01999071e-01, -2.67520404e-02, -1.24784774e+00,\n",
       "         2.99745424e-02, -2.40040856e-01,  4.27173058e-01,\n",
       "         1.33089325e+00,  3.59481905e-01,  1.23111916e+00,\n",
       "        -3.48400506e-01, -5.68263909e-01],\n",
       "       [-2.46118486e-01,  1.12336820e-01, -1.09329170e+00,\n",
       "         9.98790708e-01, -1.29149697e-02,  9.82458237e-01,\n",
       "         3.96092165e-01, -1.42124114e-01,  3.24239956e-01,\n",
       "         5.78020894e-02,  2.76172494e-01],\n",
       "       [-7.51632668e-02, -1.08382738e+00,  6.06824826e-01,\n",
       "        -3.92266123e-02, -2.81336471e-01,  1.16755330e+00,\n",
       "         4.07880623e-03, -7.86291843e-01,  6.51316125e-02,\n",
       "         1.27640987e+00,  1.87121903e+00],\n",
       "       [-1.89868561e+00, -6.94378571e-01,  1.17353033e+00,\n",
       "         1.20639417e+00, -8.59475090e-01,  1.16755330e+00,\n",
       "         9.69034767e-01, -3.46856403e+00,  1.16634207e+00,\n",
       "        -2.26852784e-04,  2.99713424e+00],\n",
       "       [-4.74058778e-01,  4.18332313e-01,  2.46194048e-01,\n",
       "         9.91756970e-02,  3.17449955e-01, -3.13207179e-01,\n",
       "         1.51182250e+00,  1.37853413e+00,  9.07233729e-01,\n",
       "        -2.32342621e-01, -8.49742710e-01],\n",
       "       [-5.88028925e-01, -8.23875847e-02, -4.75067507e-01,\n",
       "        -3.16031231e-01, -3.63927703e-01, -4.05754709e-01,\n",
       "        -5.99018669e-01,  4.80923363e-01,  1.36067333e+00,\n",
       "         4.05975742e-01, -8.49742710e-01]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Scaling:\n",
    "sc = StandardScaler()\n",
    "#scaling is needed in this dataset, look at 'citric acid' and compare it with 'sulfur dioxide'\n",
    "#these columns are in magnitude very different which will create biased results when learning\n",
    "X_train = sc.fit_transform(X_train)\n",
    "#the test data only needs to be transformed:\n",
    "X_test = sc.transform(X_test)\n",
    "X_train[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "730a041f",
   "metadata": {},
   "source": [
    "### 1. Random forest classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "2f2c8eed",
   "metadata": {},
   "outputs": [],
   "source": [
    "rfc = RandomForestClassifier(n_estimators=200) #200 determines how many forest there are \n",
    "rfc.fit(X_train,y_train) # give rfc our features and the response value\n",
    "pred_rfc = rfc.predict(X_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "644c3e38",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_rfc[:20] #shows predictions for the first 20 observations of the testset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "ae23846f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.97      0.95       276\n",
      "           1       0.74      0.45      0.56        44\n",
      "\n",
      "    accuracy                           0.90       320\n",
      "   macro avg       0.83      0.71      0.75       320\n",
      "weighted avg       0.89      0.90      0.89       320\n",
      "\n",
      "[[269   7]\n",
      " [ 24  20]]\n"
     ]
    }
   ],
   "source": [
    "# let us see how well the model performs (on the testset)\n",
    "print(classification_report(y_test,pred_rfc))\n",
    "print(confusion_matrix(y_test,pred_rfc))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17f78451",
   "metadata": {},
   "source": [
    "### SVM Classifier"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2df1048e",
   "metadata": {},
   "source": [
    "Bekijke de [tutorial](https://www.youtube.com/watch?v=0Lt9w-BxKFQ&ab_channel=Simplilearn) verder vanaf minuut 31"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
